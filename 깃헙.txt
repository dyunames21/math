깃헙토큰 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


1.레포지토리 (repository)
  .git 디렉토리(숨겨진 디렉토리) : 레포지토리
  -프로젝트를 관리하기위한 프로젝트 디렉토리의 버전별
    정보를 담고있음 (버전별 프로젝트 모습, 버전별 변경사항등)
  =>커밋이 저장되는곳
 
2.커밋( commit)
  현재 프로젝트 디렉토리의 모습을 사진처럼 레포지토리에 저장됨
  고정된 결과물 자체를 커밋이라고 함
  커밋 한다.... 
  =>프로젝트 디렉토리의 특정 모습을 하나의 버전으로 남기는
    행위, 결과물

  
git init : 비어있는 레포지토리 생성하기
       ->프로젝트 디렉토리의 각 버전이 담길 장소 ( .git)
        이제 깃으로 버전관리가 가능해짐

커밋하기전 꼭 해야하는것?
 -> 깃에게 커밋한사람 알려주기!
  -> 커밋에 대한 정보( 왜 업데이트를 했는지? , 커밋메시지)
  git config user.name "유저이름"
  git config user.email "유저이메일"
 이렇게 설정해두면 커밋을 할때 내 이름과 이메일이 함께 저장됨
  
  git commit -m "커밋에 관한 정보"   ( 옵션 : -m)
  
 
  untracked : 깃에의해 아직 추적 X -> 버전관리 대상이 아닌 항목 존재
  add : 수정된 파일의 모습이 커밋에 포함될것이라 지정해줘야함
  =>git add cal.py
   이러면 cal.py란 파일은 커밋에 반영될 파일로 설정한거임(add 하다)
 
  root-commit : 해당 커밋이 프로젝트의 첫번째 커밋이라는 말
  insertions : 추가된 코드 줄갯수
  
  커밋 주의사항
   -처음 커밋하기전 사용자의 이름과 이메일 주소 설정!
   -커밋메세지 남기기!
   -커밋 하기전 어떤 파일을 커밋에 지정할지 git add를 통해 지정해주기!

   커밋의 순서
  1.working directory 에서 파일을 작성
  2. git add 를 통해 staging area 에 해당 파일을 올림
  3. git commit 을 통해 stagig area에 있는 파일을 가져와 커밋으로 남기기
  
   이 구조에서 2번이 왜 필요한가? 에 대한 대답은
  만약 working directory에서 하나의 파일이 아니라 여러 파일을 동시에 수정 및 작업 후  
    수정한 몇개의 파일만 커밋하고 싶을때 2번 과정이 없다면 항상 모든 파일이 커밋됨
   그래서 수정한 몇개의 파일만 staging area에 올림으로써(add 함으로써) 내가 원하는 부분만 커밋가능한것

  git status : 깃이 인식하고 있는 프로젝트 디렉토리의 현재 상태를 보여줌

  stage : git add로 파일을 staging area에 추가하는것
   => git status를 커밋하기전 써서 staging area에 수정할 파일이 다 들어있는지 확인해보기

  만약 디렉토리를 만들고 디렉토리 내부에 파일작업을 했을 경우
  해당 디렉토리를 add해주면 디렉토리 내부의 모든파일이 다 add됨
  	
  git add .  : 현재 프로젝트 디렉토리 내에서 변경사항이 생긴 모든 파일들을 staging area 에 추가하라는 말


 git에서 파일의 상태는
  -tracked 
  -untracked
 로 나뉨
  tracked는
  -unmodified
  -modified 
  -staged
   상태로 나뉨
 결과적으로 
  -untracked
  -unmodified
  -modified 
  -staged 
 이 네가지 상태에서 add, commit, remove를 통해 상태가 왔다갔다 하는것, 
  

  git reset 파일이름 :  해당파일 git add 취소하기
  => 해당 작업을해도 staging area에서 내려오는것 뿐이지 아직 수정항목을 working area에서 취소한것이 아님
   => git reset : staging area에서만 파일을 제거하는것
   working tree clean : 이전 커밋 이후로 변경사항 없음


   레포지토리를 외부컴퓨터에 저장하는것 
 
   깃헙에 생성한 레포지토리 : 리모트 레포지토리
   내 컴퓨터에 레포지토리 : 로컬 레포지토리

  git push : 로컬 레포지토리에 업데이트된 레포지토리를 리모트 레포지토리도 마찬가지로 업데이트 해주기
    로컬레포지토리의 내용을 그대로 리모트 레포지토리로 반영해준다.

  깃허브는 파일 이름이 README 일 경우 내용을 바로 보여줌

  반대로 
  리모트 레포지토리에서 업데이트 된 내용을 로컬레포지토리에 반영하기 위해선?
  git pull 사용해서 가져오기

 리모트 레포지토리의 사용의미?
 -똑같은 레포지토리를 하나더 생성 : 안정성, 로컬레포지토리가 손실되더라도 리모트레포지토리를 통해 복구가능
 -리모트레포지토리를 통한 협업 가능 : git push와 git pull을 통해 협업 용이함

  원칙적으로 자신만 git push 가능,
  만약 다른 사용자도 git push 가능 하게 할려면 해당 리모트 레포지토리의 collaborator로 지정

  다른프로젝트 가져오기
  - git clone 클론주소
  를 통해서 가져올수있음

 커밋히스토리 : 이때까지 커밋한기록들보기 , 
  git log : 커밋히스토리 보기 
 깃은 커밋을 구분하기위해 커밋 아이디가 각각 존재함  : 커밋해시 

  git log --pretty=oneline : 커밋하나의 정보가 한줄에 출력 
  git show 커밋해시 